type User {
  #//? Account
  id: ID! @id
  name: String!
  email: String! @unique 
  profilePic: String! 
  credits: Int!
  karma: Int!
  password: String! @unique 
  apiKey: String! @unique
  type: [AccountType!] @scalarList(strategy: RELATION) @default(value: USER)

  #//? Stats and Profile
  words: Int!
  awards: Int!
  tagline: String! 
  description: String! 
  tests: Int! 


  #//? Data
  languages: [Language!]
  content: [Content!]
  friends: [User!] 
  messages: [Message!] @relation(name: "UserToMessages", onDelete: CASCADE)
}

enum AccountType {
  USER 
  ADMIN 
  TEACHER
  FREELANCER
}

type Language {
  id: ID! @id 
  name: String! 
  code: String! 
  users: Int! 
  content: [Content!]
}

type Content {
  id: ID! @id 
  name: String!
  uploader: User!
  likes: Int! 
  saves: Int! 
  shares: Int!
  type: [ContentType!]! @scalarList(strategy: RELATION)
  content: [String!] @scalarList(strategy: RELATION)
}

enum ContentType {
  AUDIO  
  BOOK 
  ARTICLE 
  VIDEO
  EXERCISE
  LESSON
}

type Word {
  id: ID! @id 
  word: String!
  neutral: String!
  translations: [Translation!]
}

type Translation {
  id: ID! @id
  uses: Int!
  word: String!
  neutral: String!
}

#//* Misc 
type Message {
  id: ID! @id 
  sender: User! @relation(name: "UserToMessages", onDelete: SET_NULL)
  text: String!
  createdAt: DateTime! @createdAt
}

type Award {
  id: ID! @id 
  name: String! @unique
}

